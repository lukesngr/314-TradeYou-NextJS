// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model TradeYouUser {
  id                  Int                   @id @default(autoincrement())
  username            String                @unique
  password            String
  email               String
  phone               String
  address             String
  creditCardNumber    String
  creditCardCVV       String
  MembershipPlan      MembershipPlan[]
  ServiceRequest      ServiceRequest[]
  Notification        Notification[]
  Charges             Charges[]
  DistanceMemoization DistanceMemoization[]
}

model TradeYouProfessional {
  id                  Int                   @id @default(autoincrement())
  username            String                @unique
  password            String
  email               String
  phone               String
  address             String
  creditCardNumber    String
  creditCardCVV       String
  ServiceRequest      ServiceRequest[]
  Notification        Notification[]
  MembershipPlan      MembershipPlan[]
  Charges             Charges[]
  DistanceMemoization DistanceMemoization[]
}

model MembershipPlan {
  id             Int                   @id @default(autoincrement())
  category       String
  dateStarted    DateTime
  user           TradeYouUser?         @relation(fields: [userID], references: [id])
  userID         Int?
  professional   TradeYouProfessional? @relation(fields: [professionalID], references: [id], onDelete: SetNull)
  professionalID Int?
}

model Review {
  id               Int            @id @default(autoincrement())
  value            Int
  description      String
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestID], references: [id])
  serviceRequestID Int
}

model Charges {
  id             Int                   @id @default(autoincrement())
  amount         Float
  dateTime       DateTime
  user           TradeYouUser?         @relation(fields: [userID], references: [id])
  userID         Int?
  professional   TradeYouProfessional? @relation(fields: [professionalID], references: [id], onDelete: SetNull)
  professionalID Int?
}

model ServiceRequest {
  id                             Int                              @id @default(autoincrement())
  name                           String
  description                    String
  category                       String
  price                          Float
  dateTime                       DateTime
  status                         String
  user                           TradeYouUser?                    @relation(fields: [userID], references: [id], onDelete: SetNull)
  userID                         Int?
  professional                   TradeYouProfessional?            @relation(fields: [professionalID], references: [id], onDelete: SetNull)
  professionalID                 Int?
  ProfessionalsThatAcceptRequest ProfessionalsThatAcceptRequest[]
  Review                         Review[]
  ProfessionalsThatDenyRequest   ProfessionalsThatDenyRequest[]
  Payment                        Payment[]
}

model Payment {
  id               Int            @id @default(autoincrement())
  dateTime         DateTime
  amount           Float
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestID], references: [id])
  serviceRequestID Int
}

model Notification {
  id             Int                  @id @default(autoincrement())
  user           TradeYouUser         @relation(fields: [userID], references: [id])
  userID         Int
  professional   TradeYouProfessional @relation(fields: [professionalID], references: [id])
  professionalID Int
  dateTime       DateTime
  message        String
}

model ProfessionalsThatAcceptRequest {
  id               Int            @id @default(autoincrement())
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestID], references: [id])
  serviceRequestID Int
  userName         String
}

model ProfessionalsThatDenyRequest {
  id               Int            @id @default(autoincrement())
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestID], references: [id])
  serviceRequestID Int
  userName         String
}

model DistanceMemoization {
  id               Int                   @id @default(autoincrement())
  professional     TradeYouProfessional? @relation(fields: [professionalID], references: [id], onDelete: SetNull)
  professionalID   Int?
  distance         Int
  TradeYouUser     TradeYouUser?         @relation(fields: [tradeYouUserId], references: [id])
  tradeYouUserId   Int?
}
